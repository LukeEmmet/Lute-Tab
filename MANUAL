
This is a simplified introduction to writing input files for
the "tab" lute tablature program.  It assumes that you are 
familiar with some text editor or word processer that can
create ascii text files.

the program "tab" takes a text file, that you write, as its
input, and outputs a file that a printer can use to print
your music.  You run tab with the command 
  
  tab filename

I recommend that you name the file something.tab, where
the .tab part identifies the file as tab input.  It will make life
simpler for you in the long run.  You can use various
options, in the form of -X whjere X is a letter, to do different
things, but you don't need to know about that at this point.

The tab input file contains lines of text and tablature, encoded

To start with, here is how to enter a simple bar of tablature.
Each horizontal line in the tab file represents a vertical
column within a line or tablature.  A vertical column could be
a chord or single not of music, or a barline, or a fancy 
squiggle at the end of the piece.  Note that music is entered
"vertically", a chord at a time, rather than in melodic parts.
Here is a barline, a c chord, and a barline:

b
2 cdc a
b
e

note that each line starts on the extreme left hand side
of the page.  The b prints a barline.  the "2 cdc a"
prints the c chord.  The 2 prints a flag with two flags,
the space prints a space, the cdc print the c,d,and c, then 
there is another space and an a at the bottom.
There is another b for a barline.
The e denotes the end of the piece of music.  Tab will complain if
the piece doesn't end with an e.

A more complicated piece:

b
3 cdc a
x d
xa
xc
1cdda
b
b
e

Here we indicate that the first chord has three flags over it,
and the next three chords do not have any flags over them, but 
they are spaced as if they had the same time value as the first 
chord with three flags.  The piece ends with two barlines close 
together.

You can also use the grid style of flags by putting
a # in front of the first flag number:

b
#3 cdc a
x d
xa    a
xc
#2 cdc
x cdc
.
b
b
.
e

When the line starts with a number, or # and a number, a flag is
drawn.  if the line starts with an x the time of the most recent
flag is used, and either a grid or nothing is drawn, depending on 
whether the line starts with # or not.

Two lines are seperated by a blank line start a new system of 
tablature.  You *must* tell tab where to break lines, by using 
the blank line - otherwise all the notes will be on one line,
and you will get a warning message.

b
1cdda
2a d e
1 da-c
2 cd-a
b
1 acc
2  d-e
1  da
2  cc
b

b
1  dca
2 a
2. cd-a
3 d
Ya
b
b
Q
e

Here the dash is used to draw a vertical line in the chord.
The period after the first number draws a dotted flag.  The
Y starting the line near the end draws a fermata insteasd
of a flag, and the Q draws a squiggle.


So - you see that the first character on a line does different
things than the other characters.  The first character can be a:

	b      - barline
	.      - a column of dots 
	Y or y - fermata
	Q or q - squiggle
	#      - a "grid", followed by the number of horizontal lines
	0 thru 5 - a time symbol with that many flags
		a dot following this number prints a dotted flag
	x      - use the same time value as preceeding note, don't draw a flag
	w      - a half note
	w      - a whole note
	%      - a comment - the rest of the line is ignored
	D      - a big 2 (time signature)
	T or F - a big three or four

after the first characters come the "notes", a through p, and
a - gives a vertical line.  A period ( . ) draws a dot in that
position.

ORNAMENTS:

Of course you need ornaments, fingering marks, etc.  Some of the
ornaments are simple.  A + before a note draws a + in front of that 
note on the page.  A * in front of a note draws a dot in front of that note.
A # draws a  #  before the next note.  A % draws double dots.
So 

2 cdc a could become
2 +c*d#c %a

the note values would be the same, but they would have ornaments 
before them.

But sometimes you want the ornament *after* the tablature number -
so you use & as the *postfix* operator - and symbol preceeded by
& is printed after the preceeding note, rather than before the next note.

2 c&+dc     prints a + after the first c

There is an "infix operator", !, which prints anything as a note -

2 !+dc a    would have a + in the place of the top c.

You can draw an underline with { and }.  { goes in the position
of the start of the underline, and } goes at the end.  I like to
position the lines after a space -  2 cdc a {  .  If you
have unmatched braces you can cause a lot of trouble, and currently
tab doesn't warn you.  You can use ( and ) for a second underline.
The horizontal position of underlines is determined by where the
characters are positioned.  the starting vertical position is also
where the start character is, but in the dvi output version of tab
the end vertical position is approximated, because there are only a
few different slopes of the lines.